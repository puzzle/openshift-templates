apiVersion: v1
kind: Template
labels:
  template: redis-ephemeral-template
message: |-
  The following service(s) have been created in your project: ${REDIS_SERVICE_NAME}.

         Password: ${REDIS_PASSWORD}
   Connection URL: redis://${REDIS_SERVICE_NAME}:6379/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.
metadata:
  annotations:
    description: |-
      Redis in-memory data structure store, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.

      WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing
    iconClass: icon-redis
    openshift.io/display-name: Redis (Ephemeral)
    openshift.io/documentation-url: https://github.com/sclorg/redis-container/tree/master/3.2
    openshift.io/long-description: This template provides a standalone Redis server.  The
      data is not stored on persistent storage, so any restart of the service will
      result in all data being lost.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: database,redis
  name: redis-ephemeral
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: redis
    name: redis
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: registry.access.redhat.com/rhscl/redis-32-rhel7:latest
      from:
        kind: DockerImage
        name: registry.access.redhat.com/rhscl/redis-32-rhel7:latest
      importPolicy:
        scheduled: ${{SCHEDULE_IMAGE_IMPORTS}}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: '{.data[''database-password'']}'
    name: ${REDIS_SERVICE_NAME}
  stringData:
    database-password: ${REDIS_PASSWORD}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
    name: ${REDIS_SERVICE_NAME}
  spec:
    ports:
    - name: redis
      nodePort: 0
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: ${REDIS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: redis-post-init
  data:
    post-init.sh: |
      #!/bin/sh

      max_memory() {
        # High number which is the max limit until which memory is supposed to be
        # unbounded.
        local mem_file="/sys/fs/cgroup/memory/memory.limit_in_bytes"
        if [ -r "${mem_file}" ]; then
          local max_mem_cgroup="$(cat ${mem_file})"
          local max_mem_meminfo_kb="$(cat /proc/meminfo | awk '/MemTotal/ {print $2}')"
          local max_mem_meminfo="$(expr $max_mem_meminfo_kb \* 1024)"
          if [ ${max_mem_cgroup:-0} != -1 ] && [ ${max_mem_cgroup:-0} -lt ${max_mem_meminfo:-0} ]
          then
            echo "${max_mem_cgroup}"
          fi
        fi
      }

      sed '/^save/d' /etc/redis.conf >/tmp/redis.conf
      cat /tmp/redis.conf >/etc/redis.conf
      rm -f /tmp/redis.conf
      mem_limit=$(max_memory)
      if [ "${mem_limit}" ]; then
        echo -e "maxmemory $(expr $mem_limit \* 80 / 100)\nmaxmemory-policy allkeys-lru" >>/etc/redis.conf
      fi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${REDIS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${REDIS_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${REDIS_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${REDIS_SERVICE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              memory: ${REDIS_MEMORY_REQUEST}
            limits:
              memory: ${REDIS_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: ${REDIS_SERVICE_NAME}-data
          - mountPath: /usr/share/container-scripts/redis/post-init.sh
            subPath: ..data/post-init.sh
            name: ${REDIS_SERVICE_NAME}-post-init
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ""
          name: ${REDIS_SERVICE_NAME}-data
        - name: ${REDIS_SERVICE_NAME}-post-init
          configMap:
            name: redis-post-init
            defaultMode: 0755
            items:
            - key: post-init.sh
              path: post-init.sh
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:latest
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
parameters:
- description: Minimum amount of memory the container requires to start and reserves on the cluster.
  displayName: Memory Request
  name: REDIS_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: REDIS_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: REDIS_SERVICE_NAME
  required: true
  value: redis
- description: Password for the Redis connection user.
  displayName: Redis Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: REDIS_PASSWORD
  required: true
- description: Whether to import new images automatically.
  name: SCHEDULE_IMAGE_IMPORTS
  value: 'false'
