# Source: https://raw.githubusercontent.com/openshift/origin/release-3.11/examples/db-templates/postgresql-persistent-template.json
# Converted to YAML and extended with memory request and admin passwort parameters.
# Removed image to make template idempotent, image is configured by image change trigger.
apiVersion: v1
kind: Template
labels:
  template: postgresql-persistent-template
message: |-
  The following service(s) have been created in your project: ${POSTGRESQL_SERVICE_NAME}.

         Username: ${POSTGRESQL_USER}
         Password: ${POSTGRESQL_PASSWORD}
    Database Name: ${POSTGRESQL_DATABASE}
   Connection URL: postgresql://${POSTGRESQL_SERVICE_NAME}:5432/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
metadata:
  annotations:
    description: |-
      PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-postgresql
    openshift.io/display-name: PostgreSQL
    openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/db_images/postgresql.html
    openshift.io/long-description: This template provides a standalone PostgreSQL
      server with a database created.  The database is stored on persistent storage.  The
      database name, username, and password are chosen via parameters when provisioning
      this service.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: database,postgresql
  name: postgresql-persistent
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: postgresql
    name: postgresql
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: ${POSTGRESQL_IMAGE}
      from:
        kind: DockerImage
        name: ${POSTGRESQL_IMAGE}
      importPolicy:
        scheduled: ${{SCHEDULE_IMAGE_IMPORTS}}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-admin-password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${POSTGRESQL_SERVICE_NAME}
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-admin-password: ${POSTGRESQL_ADMIN_PASSWORD}
    database-user: ${POSTGRESQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${POSTGRESQL_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${POSTGRESQL_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${POSTGRESQL_SERVICE_NAME}
  spec:
    storageClassName: ${{POSTGRESQL_STORAGE_CLASS}}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${POSTGRESQL_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${POSTGRESQL_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${POSTGRESQL_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${POSTGRESQL_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${POSTGRESQL_SERVICE_NAME}
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${POSTGRESQL_SERVICE_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - stat /var/lib/pgsql/data && /usr/libexec/check-container --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              cpu: ${POSTGRESQL_CPU_REQUEST}
              memory: ${POSTGRESQL_MEMORY_REQUEST}
            limits:
              cpu: ${POSTGRESQL_CPU_LIMIT}
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${POSTGRESQL_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${POSTGRESQL_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${POSTGRESQL_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
      type: ImageChange
    - type: ConfigChange
parameters:
- description: PostgreSQL container image. Defaults to 'registry.access.redhat.com/rhscl/postgresql-10-rhel7:latest'.
  displayName: PostgreSQL Image
  name: POSTGRESQL_IMAGE
  required: true
  value: registry.access.redhat.com/rhscl/postgresql-10-rhel7:latest
- description: Minimum amount of cpu the container needs to start and reserves on the cluster.
  displayName: CPU Request
  name: POSTGRESQL_CPU_REQUEST
  required: true
  value: 10m
- description: Minimum amount of memory the container needs to start and reserves on the cluster.
  displayName: Memory Request
  name: POSTGRESQL_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of cpu the container can use.
  displayName: Memory Limit
  name: POSTGRESQL_CPU_LIMIT
  required: true
  value: '2'
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: POSTGRESQL_MEMORY_LIMIT
  required: true
  value: 2Gi
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: POSTGRESQL_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Password for the PostgreSQL admin user.
  displayName: PostgreSQL Admin Password
  name: POSTGRESQL_ADMIN_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb
- description: Postgresql storage claim selector. Defaults to null.
  name: POSTGRESQL_STORAGE_CLASS
  value: 'null'
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Whether to import new images automatically.
  name: SCHEDULE_IMAGE_IMPORTS
  value: 'false'
